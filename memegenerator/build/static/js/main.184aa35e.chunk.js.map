{"version":3,"sources":["fonts/Impact.ttf","components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainContent","state","memes","currentMemeURL","topLabel","bottomLabel","handelRandomMeme","bind","handelLabels","fetch","res","json","data","this","setState","randomValue","Math","floor","random","length","prevState","event","target","name","value","className","alt","src","style","display","justifyContent","type","placeholder","onChange","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,oC,2MC8G5BC,E,YA3GX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,MAAO,GACPC,eAAgB,GAChBC,SAAU,GACVC,YAAa,IAGjB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVV,E,qLAcQE,MAAM,sC,cAAlBC,E,0BACaA,EAAIC,Q,OAAjBC,E,OAENC,KAAKC,SAAS,CACVZ,MAAOU,EAAI,KAAJ,QAGXC,KAAKP,mB,0FAIL,IAAIS,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKZ,MAAMC,MAAMiB,QAE9DN,KAAKC,UAAS,SAAAM,GAGV,MAAO,CACHjB,eAHeiB,EAAUlB,MAAMa,GAAhB,U,mCAQdM,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MAEbX,KAAKC,SAAL,eACKS,EAAOC,M,+BAKZ,OACI,8BACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,yBACIC,IAAI,OACJC,IAAKd,KAAKZ,MAAME,iBAEpB,wBAAIsB,UAAU,gBACTZ,KAAKZ,MAAMG,UAEhB,wBAAIqB,UAAU,mBACTZ,KAAKZ,MAAMI,cAGpB,yBACIoB,UAAU,eACVG,MAAO,CACHC,QAAS,OACTC,eAAgB,WAGpB,yBAAKL,UAAU,OACX,yBAAKA,UAAU,OACX,2BACIM,KAAK,OACLR,KAAK,WACLS,YAAY,YACZR,MAAOX,KAAKZ,MAAMG,SAClB6B,SAAUpB,KAAKL,gBAGvB,yBAAKiB,UAAU,OACX,2BACIM,KAAK,OACLR,KAAK,cACLS,YAAY,eACZR,MAAOX,KAAKZ,MAAMI,YAClB4B,SAAUpB,KAAKL,kBAM/B,yBAAKiB,UAAU,sBACX,4BACIA,UAAU,+BACVS,QAASrB,KAAKP,kBAFlB,wB,GA7FN6B,IAAMC,W,MCcjBC,MAVf,WACI,OACI,yBAAKZ,UAAU,OACX,6BACI,kBAAC,EAAD,SCEIa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.184aa35e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Impact.3eb51b5f.ttf\";","import React from 'react';\n\nclass MainContent extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            memes: [],\n            currentMemeURL: '',\n            topLabel: '',\n            bottomLabel: ''\n        };\n\n        this.handelRandomMeme = this.handelRandomMeme.bind(this);\n        this.handelLabels = this.handelLabels.bind(this);\n    }\n\n    async componentDidMount() {\n        const res = await fetch('https://api.imgflip.com/get_memes');\n        const data = await res.json();\n\n        this.setState({\n            memes: data['data']['memes']\n        });\n\n        this.handelRandomMeme();\n    }\n\n    handelRandomMeme() {\n        let randomValue = Math.floor(Math.random() * this.state.memes.length);\n\n        this.setState(prevState => {\n            const newMemeURL = prevState.memes[randomValue]['url'];\n\n            return {\n                currentMemeURL: newMemeURL\n            };\n        });\n    }\n\n    handelLabels(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value \n        });\n    }\n\n    render() {\n        return (\n            <main>\n                <div className=\"row\">\n                    <div className=\"col s12 m4 l4 offset-m4 offset-l4\">\n                        <div className=\"card\">\n                            <div className=\"card-image\">\n                                <img\n                                    alt=\"meme\"\n                                    src={this.state.currentMemeURL}\n                                />\n                                <h4 className=\"topLabelText\">\n                                    {this.state.topLabel}\n                                </h4>\n                                <h4 className=\"bottomLabelText\">\n                                    {this.state.bottomLabel}\n                                </h4>\n                            </div>\n                            <div\n                                className=\"card-content\"\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'center'\n                                }}\n                            >\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        <input\n                                            type=\"text\"\n                                            name=\"topLabel\"\n                                            placeholder=\"Top label\"\n                                            value={this.state.topLabel}\n                                            onChange={this.handelLabels}\n                                        />\n                                    </div>\n                                    <div className=\"col\">\n                                        <input\n                                            type=\"text\"\n                                            name=\"bottomLabel\"\n                                            placeholder=\"Bottom label\"\n                                            value={this.state.bottomLabel}\n                                            onChange={this.handelLabels}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"card-action center\">\n                                <button\n                                    className=\"btn waves-effect waves-light\"\n                                    onClick={this.handelRandomMeme}\n                                >\n                                    Random meme\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default MainContent;\n","import React from 'react';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport MainContent from './components/MainContent';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <div>\n                <MainContent />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './fonts/Impact.ttf';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}